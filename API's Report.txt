The difference between HTTP and HTTPS:

HTTP (HyperText Transfer Protocol): It is the basic protocol used for transferring data over the web. HTTP defines how messages are formatted and transmitted between browsers (clients) and web servers. However, HTTP is not encrypted, so the data transmitted over an HTTP connection can be intercepted by third parties, and it uses port number (80).

HTTPS (HyperText Transfer Protocol Secure): HTTPS is the secure version of HTTP. It uses SSL/TLS (Secure Sockets Layer/Transport Layer Security) to encrypt the data between the client and server. This ensures that the communication is private and secure, protecting against eavesdropping and tampering by unauthorized parties, and it uses port number (443).




REST APIs (Representational State Transfer):

Definition: REST is an architectural style that is commonly used for web services. REST APIs use standard HTTP methods like GET, POST, PUT, and DELETE and follow principles of stateless communication.
Use Cases: REST APIs are widely used for building web services that require stateless communication, easy scalability, and are platform-independent.



HTTP Methods (Get, Post, Put and Delete):

(GET)
Purpose: Retrieve data from the server.
Description: The GET method is used to request data from a specific resource or endpoint. It is read-only, meaning it does not alter the server's data in any way.
Use Case: When you want to fetch information or resources (e.g., retrieve a list of users, get details of a product).


(POST)
Purpose: Submit data to the server (often to create a new resource).
Description: The POST method is used to send data to the server, often resulting in the creation of a new resource. It can also be used for other operations that might not fit the other HTTP methods, such as triggering an action on the server.
Use Case: When you want to create a new resource (e.g., add a new user or submit a form).


(PUT)
Purpose: Update or replace an existing resource on the server.
Description: The PUT method is used to update an existing resource or create a new one if it doesnâ€™t exist. A key difference from POST is that PUT typically replaces the entire resource, meaning all fields of the resource are replaced with the new data.
Use Case: When you want to update an existing resource (e.g., change the details of a user or product).


(DELETE)
Purpose: Delete a resource from the server.
Description: The DELETE method is used to remove a specific resource from the server. It is typically used when you want to delete an item or record.
Use Case: When you want to delete a resource (e.g., remove a user, delete a product).





The types of HTTP Status Codes:


Informational (1xx)

(100 Continue): The server has received the request headers, and the client should proceed with the request.

(101 Switching Protocols): The server is switching to the protocol requested by the client (e.g., HTTP to WebSocket).





2. Successful (2xx)

(200 OK): The request was successful, and the server returned the requested data.

(201 Created): The request was successful, and the server created a new resource (commonly used for POST requests).

(204 No Content): The request was successful, but the server has no data to return (e.g., after a DELETE request).





3. Redirection (3xx)

(301 Moved Permanently): The requested resource has been permanently moved to a new URL. The client should update its links.

(302 Found): The requested resource has been temporarily moved to a different URL.

(303 See Other): The response can be found at another URL (typically used for redirecting after a POST request).

(304 Not Modified): The resource has not been modified since the last request. The client can use cached data.

(307 Temporary Redirect): Similar to 302, but the request method should not change (i.e., POST should remain POST).

(308 Permanent Redirect): Similar to 301, but the request method should remain unchanged.




4. Client Error (4xx)

(400 Bad Request): The server could not understand the request due to invalid syntax.

(401 Unauthorized): The request requires user authentication or the provided credentials are invalid.

(403 Forbidden): The server understood the request but refuses to authorize it (e.g., permission issues).

(404 Not Found): The server cannot find the requested resource (commonly seen with broken links).

(405 Method Not Allowed): The method used in the request (e.g., GET, POST) is not supported by the resource.

(408 Request Timeout): The server timed out waiting for the request.

(409 Conflict): There is a conflict with the current state of the resource (e.g., trying to create a resource that already exists).

(410 Gone): The requested resource is no longer available and will not be available again.

(415 Unsupported Media Type): The server cannot process the request because the media type is not supported.

(429 Too Many Requests): The client has sent too many requests in a given amount of time (rate limiting).




5. Server Error (5xx)

(500 Internal Server Error): A generic error message indicating a server malfunction.

(501 Not Implemented): The server does not support the functionality required to fulfill the request.

(502 Bad Gateway): The server, while acting as a gateway, received an invalid response from the upstream server.

(503 Service Unavailable): The server is currently unavailable (e.g., overloaded or under maintenance).

(504 Gateway Timeout): The server, while acting as a gateway, did not receive a timely response from the upstream server.

(505 HTTP Version Not Supported): The server does not support the HTTP version used in the request.


